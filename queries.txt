drop table if exists accounting_contact, accounting_blockchainuser, accounting_basemodel, accounting_notification, accounting_systemuser, accounting_standardaccount, 
           accounting_bankaccount, accounting_account, accounting_indicatorunit,
           accounting_accounttype, accounting_profile, accounting_profilecharity, accounting_charity, 
           accounting_expense, accounting_bill, accounting_supplier, 
           accounting_donation, accounting_donor, accounting_invoiceterm, accounting_invoicetemplate, accounting_invoice, accounting_customer, accounting_person, accounting_organisation,
           accounting_location, accounting_address, accounting_district, accounting_city, accounting_region, accounting_country,
           accounting_fund, accounting_projectupdatesmedia, accounting_projectappealupdates, 
           accounting_projectgallery, accounting_projectappealupdate, accounting_projectappeal, accounting_activityattachment, accounting_activity, accounting_indicator, 
           accounting_service, accounting_projectupdate, accounting_project, accounting_sourcedocument_comments, accounting_sourcedocumentcomments, 
           accounting_sourcedocumentattachments, accounting_sourcedocument,
           accounting_vatrates, accounting_transaction, accounting_transactiondetail;
delete from django_migrations where app='accounting';

find accounting/migrations ! -name '__init__.py' -type f -delete && python manage.py makemigrations accounting && python manage.py migrate

import importlib
from accounting import model_factories, models

delete from accounting_donation;
delete from accounting_transactiondetail;
delete from accounting_account;
delete from accounting_accounttype;
delete from accounting_profilecharity;
delete from accounting_profile;
delete from auth_user;
delete from accounting_country;

from accounting.model_factories import *
from accounting.models import *


asset = AccountType(name='AST', code=1000)
asset.save()
acct1 = Account(name='Fixed Assets', code=1001, ultimate_parent=asset)
acct1.save()

User(username='abc123', password='abc123').save()

from accounting.models import Charity, Profile, ProfileCharity
from django.contrib.auth.models import User
c = Charity(email='abc123@charity.com', name='Charity 1', legal_structure='CIO', charity_commission_number=12345678)
c.save()
u = User.objects.get(username='senaypetros')
p = Profile(first_name='John', last_name='Smith', user_type=0, user=u)
p.save()
uc = ProfileCharity(charity=c, profile=p)
uc.save()

# Serialised charity data
{'id': 7, 'uuid': '408e9g6f-84a4-4685-84cf-146000fd97ce', 'phone_number': None, 'email': 'cde234@charity.com', 'avatar': None, 'name': 'Charity 7', 'sector': None, 'legal_structure': 'CIO', 'legal_structure_other': None, 'charity_commission_number': '87654321', 'slogan': None, 'mission': None, 'address': None}

names = [i.charity.name for i in u.profile.charities.all()]

# Searching the migrations.py file
createmodel\(.*[\n|\s]*name="Account


# Donation tracker types
Profile
ProfileCharity
Charity
ProjectAppeal
ProjectGallery
ProjectAppealUpdate
ProjectUpdatesMedia


# Accounting system types
Everything


from accounting import models, blockchain_provider
from importlib import reload
from accounting import blockchain_provider
# reload(blockchain_provider)
e = models.Expense.objects.first()
blockchain_provider.brownie_blockchains.create_expense(e)

import os, sys, django
sys.path.append(
    '/Users/senaypetros/Documents/UoL/Final Project/Deliverables/Final_Code/backend')
print('Testing: python path is: ', os.environ.get('PYTHONPATH'))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.settings")
django.setup()


// Remix IDE test arguments

[
    0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de0,
    [
        0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c,0,0,100,false,false,true
    ],
    0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de1,
    [
        0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de2,
        1622524800, false, true
    ],
    [
        0x8d28ffb47438a7c9441ac050e969aebda1463432f96dbc29b06e00cf4979017c,
        0x309947f8983420bf234dd4a2cb6916d6f2bce592abec8183f9b9905b015fd78e
    ],
    [100, 100],
    ["Expense for office supplies", "Expense for office supplies"],
    [1, 0]
]


{
  "_expenseUUID": "0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de0",
  "_expense": {
    "payee": "0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c",
    "paymentMethod": 0,
    "expenseType": 0,
    "total": 100,
    "isConfirmed": false,
    "isDisputed": false,
    "isExpense": true
  },
  "_transactionUUID": "0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de1",
  "_transactionData": {
    "project": "0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de2",
    "timestamp": 1622524800,
    "isConfirmed": false,
    "isTransaction": true
  },
  "_accounts": ["0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de3"],
  "_amounts": [100],
  "_narrations": ["Expense for office supplies", "Expense for office supplies"],
  "_directions": [0]
}

from accounting.blockchain_provider import brownie_blockchains
from accounting.models import Expense
from web3 import Web3
# e = Expense.objects.first()
e = Expense.objects.all()[1]
blockchain_id = Web3.keccak(text=str(e.uuid).replace('-', ''))

brownie_blockchains.create_expense(e)

[123, [223, 'hello world'], [1,2,3,4,5]]]

from accounting import models
p = models.ProjectAppeal.objects.first()
p.charity_name

// Data for donation struct
[
  0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de0,
  [
  0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c,
  'X0134D',
  12345,
  0,
  false,
  true
  ],
  0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de1,
  [
    0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef,
    123034934,
    false,
    true
  ],
  [
    0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef,
    0xfedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210,
    0x0011223344556677889900aabbccddeeff0011223344556677889900aabbccdd
  ],
  [200, 100, 100],
  ['donation', 'donation', 'donation'],
  [1, 0, 0]
]

// Extra data for setDonation (donation inputs)
  [
    0x000000000000000000000000000000003879cdb0e5864b188f570ccea6972de2,
    12345,
    false,
    true
  ],

// Testing donation mmethod
import importlib
from accounting import blockchain_provider
blockchain_provider.brownie_blockchains.create_donation()

importlib.reload(blockchain_provider)
blockchain_provider.brownie_blockchains.create_donation()

from accounting import blockchain_provider
from accounting.models import Donation
from web3 import Web3
d = Donation.objects.first()
blockchain_provider.brownie_blockchains.create_donation(d)

blockchain_id = Web3.keccak(text=str(d.uuid).replace('-', ''))

from accounting import blockchain_provider
from accounting.models import Project
from web3 import Web3
p = Project.objects.first()
blockchain_provider.brownie_blockchains.create_project(p)
blockchain_provider.brownie_blockchains.get_project(p.uuid)

from accounting import blockchain_provider
from accounting.models import Indicator
from web3 import Web3
i = Indicator.objects.first()
blockchain_provider.brownie_blockchains.create_indicator(i)
blockchain_provider.brownie_blockchains.get_indicator(i.uuid)

from accounting import blockchain_provider
from accounting.models import Activity
from web3 import Web3
a = Activity.objects.first()
blockchain_provider.brownie_blockchains.create_activity(a)
blockchain_provider.brownie_blockchains.get_indicator(a.uuid)

# Populating data to test getSpend
from accounting.models import *
import time
from accounting.blockchain_provider import brownie_blockchains
p = Project.objects.first()
pks = p.transactions.filter(source_doc__donation__isnull=False).values_list('pk', flat=True)
donations = Donation.objects.filter(transaction__id__in=pks)
pk2 = p.transactions.filter(source_doc__expense__isnull=False).values_list('pk', flat=True)
expenses = Expense.objects.filter(transaction__id__in=pk2)
for donation in donations:
  brownie_blockchains.create_donation(donation)
  time.sleep(0.5)
for expense in expenses:
  brownie_blockchains.create_expense(expense)
  time.sleep(0.5)

# Add data for getActivities
brownie_blockchains.create_project(p)
act = p.services.first().indicators.first().activities.all()
for a in act:
  brownie_blockchains.create_activity(a)
  time.sleep(0.5)

curl -X POST \
  http://localhost:8000/dj-rest-auth/login/ \
  -b ./cookies/cookies.txt \
  -c ./cookies/cookies.txt \
  -H "Content-Type: application/json" \
  -d '{"username": "senaypetros", "password": "football89"}' >> cookies.txt

curl -X POST \
  http://localhost:8000/api/v1/expenses/ \
  -H "Content-Type: application/json" \
  -H "Authorization: Token $(jq -r '.key' cookies.txt) \
  -d '[
    {
      "expense_type": "School books",
      "payment_type": null,
      "supplier": null,
      "line_items": [
          {
              "parent_charity": "2349711f-e63e-4ea5-b45d-dd7f021a16b3",
              "date": "2022-06-01",
              "dr_account": "Materials",
              "cr_account": "Expenses",
              "amount": "Â£1,534.00",
              "description": "New textbooks provided for schools",
              "fund": null
          }
      ]
    },
  ]'


from accounting import model_factories, blockchain_provider, models, serializers
from accounting.blockchain_provider import brownie_blockchains
e = models.Expense.objects.last()
c = models.Charity.objects.last()
brownie_blockchains.create_charity(c)
c2 = models.Charity.objects.all()[1]
brownie_blockchains.create_charity(c2)
e.supplier.blockchain_id = c2.blockchain_id
tx = brownie_blockchains.create_expense(c, e)

from accounting import model_factories, blockchain_provider, models, serializers
from accounting.blockchain_provider import brownie_blockchains
c = models.Charity.objects.first()
brownie_blockchains.create_charity(c)
p = models.Project.objects.first()
d = models.Donation.objects.last()
d.transaction.first().project = p
d.save()
brownie_blockchains.create_donation(c, d)
brownie_blockchains.create_donation(c, d)
a = models.Activity.objects.last()
a.indicator.service.project = p
# Add location of Dhaka
a.location.latitude = 23.804
a.location.longitude = 90.4152
a.save()
brownie_blockchains.create_activity(c, a)
# Create activity with different UUID, so smart contract can access it
a = model_factories.ActivityFactory.create()
# Nairobi
a.location.latitude = -1.2863
a.location.longitude = 36.8172
a.indicator.service.project = p
a.save()
brownie_blockchains.create_activity(c, a)
e = models.Expense.objects.last()
et = e.transaction.first()
et.project = p
et.save()
brownie_blockchains.create_expense(c, e)
brownie_blockchains.create_expense(c, e)

c.blockchain_id = brownie_blockchains.create_account()
c2.blockchain_id = brownie_blockchains.create_account()

charity_data = {
  address: null,
  avatar: null,
  blockchain_id: "0x19af74A5a2207be78f61FdbEA6E7b05779dD7E68",
  charity_commission_number: null
email
: 
"weoifj@gmail.com"
legal_structure
: 
null
legal_structure_other
: 
null
mission
: 
"."
name
: 
"Green Cities Initiative"
phone_number
: 
null
sector
: 
"environment"
slogan
: 
"Emergency Relief"
uuid
: 
"2e592ca8-abac-481c-865f-c29fb087c998"
}

curl 
  -X POST http://localhost:8000/api/v1/charities/
  -d 
'{"address": None,
 "avatar": None,
 "charity_commission_number": 12345678,
 "email": "hello@gmmail.com",
 "legal_structure": None,
 "legal_structure_other": None,
 "mission": "mission",
 "name": "Help",
 "phone_number": "+1 201-555-0123",
 "sector": "community",
 "slogan": "hello",
 "uuid": "0243e22a-2695-45e1-a514-9233254fd00a"}'

// Testing WebSocket endpoint
const wsUrl = "ws://localhost:8000/ws/notifications/";
const ws = new WebSocket(wsUrl);

ws.onopen = (event) => {
  console.log('Connected to WebSocket server');

  // Send a message to the server
  const message = JSON.stringify({ type: 'greeting', payload: 'Hello, WebSocket!' });
  ws.send(message);
  console.log('Message sent:', message);
};

ws.onmessage = (event) => {
  console.log('Message received from server:', evennt);
};

ws.onerror = (error) => {
  console.error('WebSocket error:', error);
};

ws.onclose = (event) => {
  console.log('WebSocket connection closed:', event);
};

from accounting import model_factories, blockchain_provider, models, serializers
from accounting.blockchain_provider import brownie_blockchains
c = models.Charity.objects.last()
a = models.Activity.objects.last()
brownie_blockchains.create_activity(c, a)

from accounting import model_factories, blockchain_provider, models, serializers
from accounting.blockchain_provider import brownie_blockchains
e = models.Expense.objects.last()
c = models.Charity.objects.last()
brownie_blockchains.create_expense(c, e)

from accounting import model_factories, blockchain_provider, models, serializers
from accounting.blockchain_provider import brownie_blockchains
from accounting.blockchain import BlockchainProvider
e = models.Expense.objects.last()
c = models.Charity.objects.last()
project_uuid = BlockchainProvider.convert_uuid(e.transaction.first().project.uuid)
deployment_address=brownie_blockchains.get_address(str(c.uuid), brownie_blockchains.charity_address_path)
res = brownie_blockchains.call_contract('Charity', 'getProjectExpenseTransactions', project_uuid, account_address=c.blockchain_id, deployment_address=deployment_address)


from accounting import model_factories, blockchain_provider, models, serializers
from accounting.blockchain_provider import brownie_blockchains
from accounting.blockchain import BlockchainProvider
c = models.Charity.objects.first()
e = model_factories.ExpenseFactory.create()
p = models.Project.objects.first()
c2 = models.Charity.objects.all()[1]
brownie_blockchains.create_charity(c2)
e.supplier.blockchain_id = c2.blockchain_id
et = e.transaction.first()
et.project = p
et.save()

tx = brownie_blockchains.create_expense(c, e)
tx = brownie_blockchains.create_expense(c, e)

a = models.Activity.objects.last()
a.indicator.service.project = p
# Add location of Dhaka
a.location.latitude = 23.804
a.location.longitude = 90.4152
a.save()
brownie_blockchains.create_activity(c, a)
# Create activity with different UUID, so smart contract can access it
a = model_factories.ActivityFactory.create()
# Nairobi
a.location.latitude = -1.2863
a.location.longitude = 36.8172
a.indicator.service.project = p
a.save()
brownie_blockchains.create_activity(c, a)


