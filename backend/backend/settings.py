"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()

# Monkey patch to fix error with django-countries in
# Django 5.0 - from https://code.djangoproject.com/ticket/35046#comment:4
from django_countries.widgets import LazyChoicesMixin
LazyChoicesMixin.get_choices = lambda self: self._choices
LazyChoicesMixin.choices = property(
    LazyChoicesMixin.get_choices, LazyChoicesMixin.set_choices)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-l^!an)*y7hq%abz$24ab3%48o0w%4^claip&580cnfc!3)*9ls"
SECRET_KEY=os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['http://localhost:3000']
ALLOWED_HOSTS = ['*']
CSRF_USE_SESSIONS = True
# CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3002",
    "http://localhost:8001"
]
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000', 'http://localhost:3002', "http://localhost:8001"]
# # For testing purposes
SESSION_COOKIE_SECURE = False
SESSION_COOKIE_HTTPONLY = False
# TODO: insecure setting used to persist cookie after
#Â Stripe checkout redirection - check if still necessary
SESSION_COOKIE_SAMESITE = None
SESSION_COOKIE_AGE = 60*60*24
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False

SESSION_LOGIN = True

# dj-rest-auth configuration
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'username'


# Application definition

INSTALLED_APPS = [
    "daphne",
    "accounting.apps.AccountingConfig",
    'corsheaders',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # "django_phonenumbers",
    "phonenumber_field",
    'rest_framework',
    "django_countries",
    "djmoney",
    'rest_framework.authtoken',
    'dj_rest_auth',
    'django_extensions',
    'django.contrib.sites',
    'channels',
    'django_filters',
    'allauth',
    'colorfield',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth.registration'
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"
# ASGI_APPLICATION = "routing.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'finalPrototype',
        'USER': 'admin',
        'PASSWORD': 'rootroot',
        'HOST': 'backend-database.c5s20syww7ye.eu-north-1.rds.amazonaws.com',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'accounting.permissions.CsrfExemptSessionAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend', 'rest_framework.filters.SearchFilter'],

    # 'DEFAULT_PERMISSION_CLASSES': [
    #     # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    #     'rest_framework.permissions.IsAdminUser'
    # ]

    'EXCEPTION_HANDLER': 'accounting.exceptions.exception_logging'

}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/api/v1/countries"

GRAPH_MODELS = {
    'all_applications': True,
    'graph_models': True,
}

SITE_ID = 1

# Print SQL commands issued when the Django ORM is used in Django shell
SHELL_PLUS_PRINT_SQL = True

# REST_AUTH = {
#     'TOKEN_SERIALIZER': 'accounting.serializers.CustomTokenSerializer'
# }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("localhost", 6379)],
        },
    },
}

# Caching responses in a Redis backend to improve speed of queries
# # Disable caching during tests by activating the DummyCache
# ACTIVATE_TEST_CACHE = False
# if ACTIVATE_TEST_CACHE == True:
#     cache_settings = {
#         "BACKEND": "django.core.cache.backends.dummy.DummyCache"
#     }
# else:
#     cache_settings = {
#         "BACKEND": "django.core.cache.backends.redis.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379",
#     } 
# CACHES = {
#     "default": cache_settings
# }
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        # "OPTIONS": {"MAX_ENTRIES": 1000},
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            # 'format': '{asctime} {levelname} {message}',
            "format": "[%(asctime)s] [%(levelname)s] %(message)s",
            # Indicates the 'format' string above uses new-style Python format strings
            # "style": "{"
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'error.log'),
            'formatter': 'simple'
        },
    },
    'root': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        }
    },
}

# Blockchain configuration settings - update as needed
CONTRACT_ABI_DIR = BASE_DIR.parent / \
    "blockchain/smart_contracts/build/contracts"
    # "final-blockchain/Ethereum/truffle/build/contracts"

# Celery settings
# result_ackend_transport_options = {
# 'global_keyprefix': 'celery_'
# }
# Credit: code from GitHub Copilot
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

AWS_ACCESS_KEY_ID = 'AKIA5AJAGFRJ5UG3AO4W'
AWS_SECRET_ACCESS_KEY = '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'
AWS_STORAGE_BUCKET_NAME = 'tripleentrystorage'
AWS_S3_SIGNATURE_NAME = ''
AWS_S3_REGION_NAME = 'eu-north-1'
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_VERITY = True
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'